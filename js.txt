(async function () {
    console.log("🔍 Iniciando escaneamento...");

    // Criando interface na página
    let scanningDiv = document.createElement("div");
    Object.assign(scanningDiv.style, {
        position: "fixed",
        bottom: "0",
        left: "0",
        width: "100%",
        maxHeight: "50vh",
        overflowY: "auto",
        backgroundColor: "#f8f9fa",
        color: "#212529",
        padding: "15px",
        zIndex: "9999",
        borderTop: "2px solid black",
        fontFamily: "Arial, sans-serif",
        boxShadow: "0px -2px 10px rgba(0, 0, 0, 0.2)"
    });

    scanningDiv.innerHTML = "<h4>🔍 Escaneando recursos...</h4>";
    document.body.appendChild(scanningDiv);

    let foundPaths = new Set();
    let processedURLs = new Set();

    function isValidPath(path) {
        return (
            path &&
            (path.startsWith("/") || path.startsWith("./") || path.startsWith("../")) &&
            !/[^\x20-\x7E]/.test(path) && // Apenas caracteres ASCII visíveis
            path.length > 1 &&
            path.length < 200
        );
    }

    async function fetchAndExtract(url) {
        if (processedURLs.has(url)) return;
        processedURLs.add(url);

        try {
            const response = await fetch(url, { cache: "no-store" });
            if (!response.ok) {
                console.warn(`❌ Falha ao acessar ${url}: ${response.status}`);
                return;
            }
            const text = await response.text();
            extractPaths(text);
        } catch (error) {
            console.error(`⚠ Erro ao acessar ${url}:`, error);
        }
    }

    function extractPaths(content) {
        let regex = /['"`]((?:\/|\.\.\/|\.\/)[^"'`\s]+)['"`]/g;
        let matches = content.matchAll(regex);
        for (let match of matches) {
            let path = match[1].split("?")[0]; // Remover parâmetros da URL
            if (isValidPath(path)) foundPaths.add(path);
        }
    }

    let resources = performance.getEntriesByType("resource").map((res) => res.name);
    await Promise.all(resources.map(fetchAndExtract));

    scanningDiv.innerHTML = `
        <h4>🔍 Caminhos Relativos Encontrados (${foundPaths.size}):</h4>
        <ul style="max-height: 200px; overflow-y: auto; font-size: 14px; list-style: none; padding: 0;">
            ${[...foundPaths].map((p) => `<li style="padding: 3px 0;">📂 ${p}</li>`).join("")}
        </ul>
        <button id="copyResults" style="padding: 8px 12px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">📋 Copiar para Área de Transferência</button>
    `;

    document.getElementById("copyResults").addEventListener("click", async () => {
        try {
            await navigator.clipboard.writeText([...foundPaths].join("\n"));
            let button = document.getElementById("copyResults");
            button.textContent = "✅ Copiado!";
            setTimeout(() => (button.textContent = "📋 Copiar para Área de Transferência"), 2000);
        } catch (error) {
            alert("❌ Erro ao copiar para a área de transferência.");
        }
    });

})();
